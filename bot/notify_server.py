import logging
from aiohttp import web

# üîß –ù–∞—Å—Ç—Ä–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("aiohttp_notify")
logger.setLevel(logging.INFO)

# –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–Ω—Å–æ–ª—å
handler = logging.StreamHandler()  # –ª–æ–≥ –≤ stdout
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

routes = web.RouteTableDef()


@routes.post("/notify")
async def notify_handler(request):
    try:
        data = await request.json()
        tg_id = data["tg_id"]
        amount = data["amount"]
        payment_id = data.get("payment_id")

        message = f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount}$ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\nID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"

        bot = request.app["bot"]
        await bot.send_message(tg_id, message)

        logger.info(f"[NOTIFY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ")

        return web.json_response({"status": "ok"})

    except Exception as e:
        logger.exception(f"[NOTIFY] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)


async def run_aiohttp_server(bot_instance):
    app = web.Application()
    app["bot"] = bot_instance
    app.add_routes(routes)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8081)  # üëà –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –≤ docker-compose
    await site.start()

    logger.info("[SERVER] AIOHTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8081")