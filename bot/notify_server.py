import logging
from aiohttp import web
from bot.keyboards.notify_meny import get_support_kb, get_main_menu_kb
from bot.handlers.balance import robokassa_payment_success
from aiogram.fsm.context import FSMContext, StorageKey

# üîß –ù–∞—Å—Ç—Ä–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("aiohttp_notify")
logger.setLevel(logging.INFO)

# –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–Ω—Å–æ–ª—å
handler = logging.StreamHandler()  # –ª–æ–≥ –≤ stdout
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

routes = web.RouteTableDef()


@routes.post("/notify")
async def notify_handler(request):
    try:
        data = await request.json()
        logger.info(f"[NOTIFY] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
        notification_type = data.get("type", "payment")

        bot = request.app["bot"]

        if notification_type == "notification":
            tg_ids = data.get("tg_ids")
            message = data.get("message", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            image_url = data.get("image_url")
            logger.info(f"[NOTIFY] –ò—Ç–æ–≥–æ–≤—ã–π image_url: {image_url}")
            if not tg_ids or not isinstance(tg_ids, list):
                logger.error("[NOTIFY] tg_ids –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                return web.json_response({"error": "tg_ids –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"}, status=400)
            for tg_id in tg_ids:
                try:
                    if image_url:
                        if isinstance(image_url, str) and image_url.startswith("http"):
                            await bot.send_photo(tg_id, image_url, caption=message)
                            logger.info(f"[NOTIFY] –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {image_url}")
                        else:
                            logger.warning(f"[NOTIFY] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π image_url –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {image_url}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                            await bot.send_message(tg_id, message)
                            logger.info(f"[NOTIFY] –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} (–±–µ–∑ —Ñ–æ—Ç–æ)")
                    else:
                        await bot.send_message(tg_id, message)
                        logger.info(f"[NOTIFY] –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} (–±–µ–∑ —Ñ–æ—Ç–æ)")
                except Exception as e:
                    logger.error(f"[NOTIFY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}", exc_info=True)
            return web.json_response({"status": "ok"})

        # --- —Å—Ç–∞—Ä—ã–µ —Ç–∏–ø—ã ---
        tg_id = data.get("tg_id")
        if notification_type == "payment":
            amount = data["amount"]
            payment_id = data.get("payment_id")
            message = f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount}$ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\nID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
            reply_markup = None
        elif notification_type == "ban_notification":
            message = data["message"]
            reply_markup = get_support_kb
        elif notification_type == "unban_notification":
            message = data["message"]
            reply_markup = get_main_menu_kb
        else:
            message = data.get("message", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            reply_markup = None

        if tg_id:
            # –î–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –†–æ–±–æ–∫–∞—Å—Å—ã –≤—ã–∑—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É VPN
            fsm_context = FSMContext(
                storage=bot.dispatcher.storage,
                key=StorageKey(
                    chat_id=tg_id,
                    user_id=tg_id,
                    bot_id=bot.id
                )
            )
            sent_message = await bot.send_message(tg_id, message, reply_markup=reply_markup)
            await robokassa_payment_success(sent_message, fsm_context)
            logger.info(f"[NOTIFY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} —Ç–∏–ø–∞ {notification_type} –∏ –≤—ã–∑–≤–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É VPN")

        return web.json_response({"status": "ok"})

    except Exception as e:
        logger.exception(f"[NOTIFY] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)


async def run_aiohttp_server(bot_instance):
    app = web.Application()
    app["bot"] = bot_instance
    app.add_routes(routes)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8081)  # üëà –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –≤ docker-compose
    await site.start()

    logger.info("[SERVER] AIOHTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8081")