from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.states.vpn import BuyVPN
from bot.keyboards.vpn_menu import (
    get_vpn_type_kb,
    get_duration_kb,
    get_insufficient_funds_kb,
    get_instruktion_kb,
    get_country_kb as get_country_kb_func,
    get_confirmation_kb,
)
from bot.services.buy_vpn import (
    get_vpn_types_from_api,
    get_durations_by_type_from_api,
    buy_subscription_api,
    build_tariff_showcase,
    get_countries_from_api
)

router = Router()


@router.callback_query(F.data == "buy_vpn")
async def select_target(callback: CallbackQuery, state: FSMContext):
    vpn_types = await get_vpn_types_from_api()
    await callback.message.answer(
        text=(
            "–í—ã–±–µ—Ä–∏—Ç–µ VPN –ø–æ —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å—Ç—Ä–∞–Ω–µ ‚¨áÔ∏è\n\n"
            "‚ö†Ô∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ VPN —Ç–æ–π —Å—Ç—Ä–∞–Ω—ã, –≥–¥–µ –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "üß† *–ß—Ç–æ –∑–Ω–∞—á–∞—Ç ¬´–û–¥–∏–Ω–æ—á–Ω–æ–µ¬ª –∏ ¬´–î–≤–æ–π–Ω–æ–µ¬ª —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ?*\n"
            "‚Äî *–û–¥–∏–Ω–æ—á–Ω–æ–µ* —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∏ –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å üîìüöÄ\n"
            "‚Äî *–î–≤–æ–π–Ω–æ–µ* —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–≤–∞ —É–∑–ª–∞, –Ω–æ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∏–∂–µ üõ°Ô∏èüîí\n\n"
            "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ VPN ‚Äì –∂–º–∏—Ç–µ ¬´–í—ã–±—Ä–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–µ¬ª."
        ),
        reply_markup=get_vpn_type_kb(vpn_types),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("vpn_type:"))
async def select_country_or_duration(callback: CallbackQuery, state: FSMContext):
    vpn_type = callback.data.split(":")[1]
    await state.update_data(vpn_type=vpn_type)

    # –¢–µ–∫—Å—Ç –ø–æ–¥ —Ç–∏–ø
    type_to_text = {
        "country": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ VPN ‚¨áÔ∏è",
        "torrents": "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ‚¨áÔ∏è",
        "socials": "–î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π ‚¨áÔ∏è",
        "secure": "–î–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ‚¨áÔ∏è",
        "serfing": "–î–ª—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞ ‚¨áÔ∏è"
    }

    # –ö–ª—é—á –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
    type_key = vpn_type.lower().replace("_vpn", "")
    top_text = type_to_text.get(type_key, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ ‚¨áÔ∏è")

    if vpn_type == "country":
        await callback.message.answer(
            text=top_text,
            reply_markup=await get_country_kb_func()
        )
    else:
        plans = await get_durations_by_type_from_api(vpn_type)

        if not plans:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            await callback.answer()
            return

        # –°–Ω–∞—á–∞–ª–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        await callback.message.answer(text=top_text)

        # –ó–∞—Ç–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤
        showcase_text = build_tariff_showcase(
            title=callback.message.text or "–¢–∞—Ä–∏—Ñ—ã", plans=plans
        )
        await callback.message.answer(text=showcase_text, parse_mode="Markdown")

        # –ü–æ—Ç–æ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚¨áÔ∏è",
            reply_markup=get_duration_kb([
                (p["duration"], str(p["price"]), p["duration_display"], p["discount_percent"])
                for p in plans
            ]),
            parse_mode="Markdown"
        )
        await state.set_state(BuyVPN.duration)

    await callback.answer()



@router.callback_query(F.data.startswith("target_country"))
async def select_duration_by_country(callback: CallbackQuery, state: FSMContext):
    country_code = callback.data.split(":")[1]
    await state.update_data(country=country_code)

    plans = await get_durations_by_type_from_api("country")

    if not plans:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        await callback.answer()
        return

    await callback.message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É: {country_code}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=get_duration_kb([  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–ª–∞–Ω–∞–º–∏
            (p["duration"], str(p["price"]), p["duration_display"], p["discount_percent"])
            for p in plans
        ])
    )
    await state.set_state(BuyVPN.duration)
    await callback.answer()


@router.callback_query(F.data.startswith("duration:"))
async def show_confirmation(callback: CallbackQuery, state: FSMContext):
    duration = callback.data.split(":")[1]
    data = await state.get_data()
    vpn_type = data["vpn_type"]
    country = data.get("country")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None

    plans = await get_durations_by_type_from_api(vpn_type)
    selected = next((p for p in plans if p["duration"] == duration), None)

    if not selected:
        await callback.message.answer("‚ùå –¢–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await callback.answer()
        return

    await state.update_data(duration=duration)

    price = selected["discount_price"] if selected["discount_price"] else selected["price"]

    text = (
        f"üõí *–í—ã –≤—ã–±—Ä–∞–ª–∏:*\n"
        f"–¢–∏–ø: `{vpn_type}`\n"
    )

    if country:
        text += f"–°—Ç—Ä–∞–Ω–∞: `{country}`\n"

    text += (
        f"–°—Ä–æ–∫: *{selected['duration_display']}*\n"
        f"–¶–µ–Ω–∞: *${price:.2f}*\n\n"
        f"‚úÖ –ù–∞–∂–º–∏—Ç–µ *¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª*, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    )

    if vpn_type == "secure":
        text += (
            "\n\nüß† *–ß—Ç–æ –∑–Ω–∞—á–∞—Ç ¬´–û–¥–∏–Ω–æ—á–Ω–æ–µ¬ª –∏ ¬´–î–≤–æ–π–Ω–æ–µ¬ª —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ?*\n"
            "‚Äî *–û–¥–∏–Ω–æ—á–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ* ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∏ –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å üîìüöÄ\n"
            "‚Äî *–î–≤–æ–π–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ* ‚Äî –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–≤–∞ —É–∑–ª–∞, –Ω–æ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∏–∂–µ üõ°Ô∏èüîí"
        )

    await callback.message.answer(
        text=text,
        reply_markup=get_confirmation_kb(),
        parse_mode="Markdown"
    )
    await state.set_state(BuyVPN.confirmation)
    await callback.answer()


@router.callback_query(F.data == "confirm_payment")
async def complete_subscription(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    vpn_type = data["vpn_type"]
    duration = data["duration"]
    country = data.get("country")

    success, msg, vless = await buy_subscription_api(
        telegram_id=callback.from_user.id,
        vpn_type=vpn_type,
        duration=duration,
        country=country
    )

    if not success and "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in msg.lower():
        await callback.message.answer(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_insufficient_funds_kb()
        )
        await callback.answer()
        return

    reply_markup = None

    if success and vless:
        msg += (
            f"\n\n<b>–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å VLESS:</b>\n"
            f"<code>{vless}</code>\n\n"
            "–ß—Ç–æ–±—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É."
        )
        reply_markup = get_instruktion_kb

    await callback.message.answer(msg, parse_mode="HTML", reply_markup=reply_markup)
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_payment")
async def cancel_subscription(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()