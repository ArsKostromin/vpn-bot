from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.states.vpn import BuyVPN
from bot.keyboards.vpn_menu import get_vpn_type_kb, get_duration_kb, get_insufficient_funds_kb
from bot.services.buy_vpn import (
    get_vpn_types_from_api,
    get_durations_by_type_from_api,
    buy_subscription_api
)
from bot.handlers.start import process_start

router = Router()

@router.callback_query(F.data == "buy_vpn")
async def start_vpn_buying(callback: CallbackQuery, state: FSMContext):
    vpn_types = await get_vpn_types_from_api()

    description = (
        "üîí <b>–û–¥–∏–Ω–∞—Ä–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (Solo VPN)</b>\n"
        "–¢—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω VPN-—Å–µ—Ä–≤–µ—Ä, —à–∏—Ñ—Ä—É—è—Å—å –æ–¥–∏–Ω —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AES-256). "
        "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.\n\n"
        "üîê <b>–î–≤–æ–π–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (Double VPN / Multi-hop)</b>\n"
        "–¢—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —à–∏—Ñ—Ä—É–µ—Ç—Å—è –Ω–∞ –¥–≤—É—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö, —É—Å–∏–ª–∏–≤–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. "
        "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø VPN:"
    )

    await callback.message.answer(description, reply_markup=get_vpn_type_kb(vpn_types), parse_mode="HTML")
    await state.set_state(BuyVPN.vpn_type)
    await callback.answer()


@router.callback_query(F.data.startswith("vpn_type:"))
async def select_duration(callback: CallbackQuery, state: FSMContext):
    vpn_type = callback.data.split(":")[1]
    await state.update_data(vpn_type=vpn_type)

    durations_with_price = await get_durations_by_type_from_api(vpn_type)

    if not durations_with_price:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ VPN.")
        await callback.answer()
        return

    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_duration_kb(durations_with_price)
    )
    await state.set_state(BuyVPN.duration)
    await callback.answer()



@router.callback_query(F.data.startswith("duration:"))
async def complete_subscription(callback: CallbackQuery, state: FSMContext):
    duration = callback.data.split(":")[1]
    data = await state.get_data()
    vpn_type = data["vpn_type"]

    success, msg = await buy_subscription_api(
        telegram_id=callback.from_user.id,
        vpn_type=vpn_type,
        duration=duration
    )

    if not success and "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in msg.lower():
        await callback.message.answer(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_insufficient_funds_kb()  # ‚Üê ‚úÖ —Ç–µ–ø–µ—Ä—å —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
        await callback.answer()  # —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "loading..." –≤ Telegram
        return  # ‚õî –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–ª—å—à–µ –∫–æ–¥ –Ω–µ –∏–¥—ë—Ç

    elif success:
        await callback.message.answer(msg)
    else:
        await callback.message.answer(f"‚ùå {msg}")

    await state.clear()

    await process_start(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        respond_to=callback.message
    )
    await callback.answer()


