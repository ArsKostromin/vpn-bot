from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.states.vpn import BuyVPN
from bot.keyboards.vpn_menu import (
    get_vpn_type_kb,
    get_duration_kb,
    get_insufficient_funds_kb,
    get_instruktion_kb,
    get_country_kb as get_country_kb_func,
    get_target_vpn_kb as get_target_vpn_func,
)
from bot.services.buy_vpn import (
    get_vpn_types_from_api,
    get_durations_by_type_from_api,
    buy_subscription_api,
)

router = Router()

@router.callback_query(F.data == "buy_vpn1")
async def start_vpn_buying(callback: CallbackQuery, state: FSMContext):
    vpn_types = await get_vpn_types_from_api()
    description = (
        "üîí <b>–û–¥–∏–Ω–∞—Ä–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (Solo VPN)</b>\n"
        "–¢—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω VPN-—Å–µ—Ä–≤–µ—Ä, —à–∏—Ñ—Ä—É—è—Å—å –æ–¥–∏–Ω —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AES-256).\n\n"
        "üîê <b>–î–≤–æ–π–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (Double VPN / Multi-hop)</b>\n"
        "–¢—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —à–∏—Ñ—Ä—É–µ—Ç—Å—è –Ω–∞ –¥–≤—É—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö, —É—Å–∏–ª–∏–≤–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø VPN:"
    )
    await callback.message.answer(description, reply_markup=get_vpn_type_kb(vpn_types), parse_mode="HTML")
    await state.set_state(BuyVPN.vpn_type)
    await callback.answer()

@router.callback_query(F.data.startswith("vpn_type:"))
async def select_duration(callback: CallbackQuery, state: FSMContext):
    vpn_type = callback.data.split(":", 1)[1]
    await state.update_data(vpn_type=vpn_type)

    durations_with_price = await get_durations_by_type_from_api(vpn_type)
    if not durations_with_price:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ VPN.")
        await callback.answer()
        return

    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_duration_kb(durations_with_price)
    )
    await state.set_state(BuyVPN.duration)
    await callback.answer()

@router.callback_query(F.data.startswith("duration:"))
async def complete_subscription(callback: CallbackQuery, state: FSMContext):
    duration = callback.data.split(":", 1)[1]
    data = await state.get_data()
    vpn_type = data.get("vpn_type")

    success, msg, vless = await buy_subscription_api(callback.from_user.id, vpn_type, duration)

    if not success and "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in msg.lower():
        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_insufficient_funds_kb()
        )
        await callback.answer()
        return

    reply_markup = get_instruktion_kb if success and vless else None

    if vless:
        msg += (
            f"\n\n<b>–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å VLESS:</b>\n"
            f"<code>{vless}</code>\n\n"
            "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É."
        )

    await callback.message.answer(msg, parse_mode="HTML", reply_markup=reply_markup)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "buy_vpn")
async def select_target(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text=(
            "–í—ã–±–µ—Ä–∏—Ç–µ VPN –ø–æ —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å—Ç—Ä–∞–Ω–µ ‚¨áÔ∏è\n\n"
            "‚ö†Ô∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ VPN —Ç–æ–π —Å—Ç—Ä–∞–Ω—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ VPN ‚Äì –∂–º–∏—Ç–µ ¬´–í—ã–±—Ä–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–µ¬ª."
        ),
        reply_markup=get_target_vpn_func
    )
    await callback.answer()

@router.callback_query(F.data == "country")
async def select_country(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ VPN ‚¨áÔ∏è\n\n"
            "‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–æ–≤–æ–π VPN –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            "‚õîÔ∏è –ú—ã –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–∞—à Instagram –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –†–æ—Å—Å–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º IP üòÑ"
        ),
        reply_markup=get_country_kb_func()
    )
    await callback.answer()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–ª–µ–π: —Å–æ—Ü—Å–µ—Ç–∏, —Ç–æ—Ä—Ä–µ–Ω—Ç, –¥–≤–æ–π–Ω–æ–π, —Å—Ç—Ä–∞–Ω–∞
TARGETS = {
    "target:social": ("solo", "YouTube –∏ —Å–æ—Ü—Å–µ—Ç–∏"),
    "target:torrent": ("solo", "—Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤"),
    "target:double": ("double", "–¥–≤–æ–π–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º"),
    "target:country": ("solo", "–ø–æ —Å—Ç—Ä–∞–Ω–µ"),
}

for target_key, (vpn_type_val, label) in TARGETS.items():
    @router.callback_query(F.data == target_key)
    async def _(callback: CallbackQuery, state: FSMContext, vpn_type=vpn_type_val, label=label):
        await state.update_data(vpn_type=vpn_type)

        durations_with_price = await get_durations_by_type_from_api(vpn_type)
        if not durations_with_price:
            await callback.message.answer(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è {label}.")
            await callback.answer()
            return

        await callback.message.answer(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {label}:",
            reply_markup=get_duration_kb(durations_with_price)
        )
        await state.set_state(BuyVPN.duration)
        await callback.answer()
