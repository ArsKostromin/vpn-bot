from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.fsm.context import FSMContext
from bot.keyboards.balance_menu import (
    get_crypto_currency_keyboard,
    get_balance_menu,
    start_balance,
    get_balance_menu_roboc,
    end_upbalance,
    get_qr_code_keyboard,
)
from bot.services.upbalance import (
    create_payment_link,
    create_crypto_payment,
    register_star_payment,
    STAR_PRICE_RUB,
)
import logging
import traceback
from bot.states.upbalance import TopUpStates, CryptoTopUpStates
from aiogram.exceptions import TelegramBadRequest
import asyncio
from bot.services.cryptomus import make_request, check_invoice_paid, extract_wallet_info
import uuid


router = Router()


# üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data == "balance_up")
async def balance_up_callback(call: CallbackQuery):
    await call.bot.send_photo(
        chat_id=call.message.chat.id,
        photo = FSInputFile("bot/media/anonix.jpg"),
        caption="üî• –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
        reply_markup=start_balance,
    )


# üí≥ –ú–µ–Ω—é –†–æ–±–æ–∫–∞—Å—Å—ã
@router.callback_query(F.data == "robokassa")
async def balance_menu_callback(call: CallbackQuery):
    await call.message.answer(
        "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_balance_menu_roboc()
    )
    await call.answer()


# üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –†–æ–±–æ–∫–∞—Å—Å—ã
@router.callback_query(F.data.startswith("topup_"))
async def process_topup(callback: CallbackQuery, state: FSMContext):
    amount_str = callback.data.split("_")[1]

    if amount_str == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):")
        await state.set_state(TopUpStates.waiting_for_custom_amount)
        await callback.answer()
        return

    try:
        amount = int(amount_str)
        payment_link = await create_payment_link(telegram_id=callback.from_user.id, amount=amount)
        await callback.message.answer(
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ {amount} $:\n{payment_link}\n—Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 –º–∏–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã",
            reply_markup=end_upbalance
        )
        await callback.answer()
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=end_upbalance)
        await callback.answer()


# üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí∞ –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É" (–†–æ–±–æ–∫–∞—Å—Å–∞)
@router.callback_query(F.data == "topup_custom")
async def process_custom_amount_request(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):")
    await state.set_state(TopUpStates.waiting_for_custom_amount)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã (–†–æ–±–æ–∫–∞—Å—Å–∞)
@router.message(TopUpStates.waiting_for_custom_amount)
async def process_custom_amount_input(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 1 $. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        payment_link = await create_payment_link(telegram_id=message.from_user.id, amount=amount)
        await message.answer(
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ {amount} $:\n{payment_link} \n—Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 –º–∏–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã",
            reply_markup=end_upbalance
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 150")
    except Exception as e:
        logging.error(traceback.format_exc())
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


# ‚Çø –ö—Ä–∏–ø—Ç–∞: –≤—ã–±–æ—Ä —Å—É–º–º—ã
@router.callback_query(F.data == "cryptobot")
async def balance_up_start(call: CallbackQuery):
    logging.debug(f"callback_query: cryptobot | from_user={call.from_user.id}")
    try:
        await call.message.edit_text(
            "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=get_balance_menu()
        )
    except TelegramBadRequest as e:
        logging.warning(f"TelegramBadRequest: {e}")
        if "there is no text in the message to edit" in str(e):
            await call.message.answer(
                "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=get_balance_menu()
            )
        else:
            raise


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ 1/100/500$
@router.callback_query(F.data.startswith("balance_amount_"))
async def select_crypto_currency(call: CallbackQuery):
    logging.debug(f"callback_query: {call.data} | from_user={call.from_user.id}")
    amount = int(call.data.split("_")[-1])
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount}$:",
        reply_markup=get_crypto_currency_keyboard(amount)
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí∞ –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É" (–ö—Ä–∏–ø—Ç–∞)
@router.callback_query(F.data == "cryptotopup_custom")
async def process_custom_amount_request_crypto(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):")
    await state.set_state(CryptoTopUpStates.waiting_for_custom_amount)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã (–ö—Ä–∏–ø—Ç–∞)
@router.message(CryptoTopUpStates.waiting_for_custom_amount)
async def process_custom_crypto_amount_input(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 1 $. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount} $:",
            reply_markup=get_crypto_currency_keyboard(amount)
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 150")
    except Exception as e:
        logging.error(traceback.format_exc())
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


# –∑–∞–ø—É—Å–∫ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(F.data.startswith("crypto_"))
async def start_crypto_payment(call: CallbackQuery, state: FSMContext):
    logging.debug(f"callback_query: {call.data} | from_user={call.from_user.id}")
    _, currency, amount = call.data.split("_")
    amount = int(amount)
    order_id = f"user_{call.from_user.id}_{amount}_{uuid.uuid4().hex}"

    invoice_data = {
        "amount": str(amount),                    # –°—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        "currency": "USD",                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç 50 USD
        "to_currency": currency.upper(),          # –ê –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ BTC
        "order_id": order_id,
        "url_callback": "https://server2.anonixvpn.space/payments/api/crypto/webhook/",
        "url_return": "https://t.me/Anonixvpn_vpnBot",
        "is_payment_multiple": False,
        "lifetime": 900,
        "is_test": True,
    }


    networks_required = {
        "USDT": "TRON",
        "USDC": "ETH",
        "ETH": "ARBITRUM",
        "BNB": "BSC",
        "LTC": "LTC",
        "BTC": "BTC",
        "TON": "TON"
    }

    if currency.upper() in networks_required:
        invoice_data["network"] = networks_required[currency.upper()]

    try:
        logging.info(f"Creating invoice: {invoice_data}")
        response = await make_request(
            url="https://api.cryptomus.com/v1/payment",
            invoice_data=invoice_data
        )
        logging.info(f"Cryptomus response: {response}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
        wallet_info = extract_wallet_info(response)
        
        if wallet_info.get("address") and wallet_info.get("qr_code"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                wallet_address=wallet_info['address'],
                wallet_qr_code=wallet_info['qr_code'],
                payment_amount=wallet_info['amount'],
                payment_currency=wallet_info['currency'],
                payment_uuid=wallet_info.get('uuid'),
                original_amount=amount,
                original_currency=currency
            )
            await state.set_state(CryptoTopUpStates.waiting_for_payment)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ QR-–∫–æ–¥ URL-–æ–º
            qr_code = wallet_info['qr_code']
            is_qr_url = qr_code.startswith('http')
            
            if is_qr_url:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                try:
                    await call.message.answer_photo(
                        photo=qr_code,
                        caption=(
                            f"üí≥ –û–ø–ª–∞—Ç–∞ {amount}$ –≤ {currency.upper()}\n\n"
                            f"üè¶ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
                            f"`{wallet_info['address']}`\n\n"
                            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {wallet_info['amount']} {wallet_info['currency']}\n\n"
                            f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n"
                            f"‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                        ),
                        parse_mode="Markdown"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è QR-–∫–æ–¥–∞
                    qr_keyboard = get_qr_code_keyboard(
                        address=wallet_info['address'],
                        qr_code=wallet_info['qr_code'],
                        amount=wallet_info['amount'],
                        currency=wallet_info['currency']
                    )
                    
                    await call.message.answer(
                        "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        reply_markup=qr_keyboard
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    qr_message = (
                        f"üí≥ –û–ø–ª–∞—Ç–∞ {amount}$ –≤ {currency.upper()}\n\n"
                        f"üì± QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                        f"`{qr_code}`\n\n"
                        f"üè¶ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
                        f"`{wallet_info['address']}`\n\n"
                        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {wallet_info['amount']} {wallet_info['currency']}\n\n"
                        f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n"
                        f"‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è QR-–∫–æ–¥–∞
                    qr_keyboard = get_qr_code_keyboard(
                        address=wallet_info['address'],
                        qr_code=wallet_info['qr_code'],
                        amount=wallet_info['amount'],
                        currency=wallet_info['currency']
                    )
                    
                    await call.message.edit_text(
                        qr_message,
                        reply_markup=qr_keyboard,
                        parse_mode="Markdown"
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∫–∞–∫ —Ç–µ–∫—Å—Ç
                qr_message = (
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {amount}$ –≤ {currency.upper()}\n\n"
                    f"üì± QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                    f"`{qr_code}`\n\n"
                    f"üè¶ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
                    f"`{wallet_info['address']}`\n\n"
                    f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {wallet_info['amount']} {wallet_info['currency']}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n"
                    f"‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                )
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è QR-–∫–æ–¥–∞
                qr_keyboard = get_qr_code_keyboard(
                    address=wallet_info['address'],
                    qr_code=wallet_info['qr_code'],
                    amount=wallet_info['amount'],
                    currency=wallet_info['currency']
                )
                
                await call.message.edit_text(
                    qr_message,
                    reply_markup=qr_keyboard,
                    parse_mode="Markdown"
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã
            if wallet_info.get("uuid"):
                asyncio.create_task(check_invoice_paid(wallet_info["uuid"], call.message, state))
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Å —Å—Å—ã–ª–∫–æ–π
            invoice_url = response["result"]["url"]
            invoice_uuid = response["result"]["uuid"]

            asyncio.create_task(check_invoice_paid(invoice_uuid, call.message, state))

            await call.message.edit_text(
                f"üîó –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n{invoice_url}",
                reply_markup=end_upbalance
            )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
@router.callback_query(F.data == "copy_address")
async def copy_wallet_address(call: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        wallet_address = data.get('wallet_address')
        
        if wallet_address:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å clipboard API
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            await call.answer(f"–ê–¥—Ä–µ—Å: {wallet_address}", show_alert=True)
        else:
            await call.answer("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
@router.callback_query(F.data == "copy_qr")
async def copy_qr_code(call: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        wallet_qr_code = data.get('wallet_qr_code')
        
        if wallet_qr_code:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å clipboard API
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            await call.answer(f"QR-–∫–æ–¥: {wallet_qr_code}", show_alert=True)
        else:
            await call.answer("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "check_payment")
async def check_payment_status(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        payment_uuid = data.get('payment_uuid')
        
        if payment_uuid:
            await call.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...", show_alert=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
            try:
                invoice_data = await make_request(
                    url="https://api.cryptomus.com/v1/payment/info",
                    invoice_data={"uuid": payment_uuid},
                )
                
                status = invoice_data["result"].get("payment_status")
                
                if status in ("paid", "paid_over"):
                    await call.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.")
                    await state.clear()
                elif status == "pending":
                    await call.message.answer("‚è≥ –ü–ª–∞—Ç—ë–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
                else:
                    await call.message.answer(f"‚ùå –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}\n–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª.")
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await call.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ", show_alert=True)
