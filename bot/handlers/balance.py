from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext

from bot.keyboards.balance_menu import (
    get_star_topup_menu,
    get_crypto_currency_keyboard,
    get_balance_menu,
    start_balance,
    get_balance_menu_roboc,
    end_upbalance,
)
from bot.services.upbalance import (
    create_payment_link,
    create_crypto_payment,
    register_star_payment,
    STAR_PRICE_RUB,
)

import logging
import traceback
from bot.states.upbalance import TopUpStates
from aiogram import types
from decimal import Decimal
router = Router()


# üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data == "balance_up")
async def balance_up_callback(call: CallbackQuery):
    await call.bot.send_photo(
        chat_id=call.message.chat.id,
        photo="https://play-lh.googleusercontent.com/BFkf2bgtxsCvsTnR2yw8yuWD3mgpThoyiRoBhoazTqFFMNOmdxGAAqS7vMATyNwelQ",
        caption="üî• –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
        reply_markup=start_balance,
    )


# üí≥ –ú–µ–Ω—é –†–æ–±–æ–∫–∞—Å—Å—ã
@router.callback_query(F.data == "robokassa")
async def balance_menu_callback(call: CallbackQuery):
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_balance_menu_roboc()
    )
    await call.answer()


# üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –†–æ–±–æ–∫–∞—Å—Å—ã
@router.callback_query(F.data.startswith("topup_"))
async def process_topup(callback: CallbackQuery, state: FSMContext):
    amount_str = callback.data.split("_")[1]
    
    if amount_str == "custom":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ FSM
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):")
        await state.set_state(TopUpStates.waiting_for_custom_amount)
        await callback.answer()
        return

    try:
        amount = int(amount_str)
        payment_link = await create_payment_link(telegram_id=callback.from_user.id, amount=amount)
        await callback.message.answer(
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ {amount} ‚ÇΩ:\n{payment_link}",
            reply_markup=end_upbalance
        )
        await callback.answer()
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=end_upbalance)
        await callback.answer()



# üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()
    

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí∞ –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É"
@router.callback_query(F.data == "topup_custom")
async def process_custom_amount_request(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):")
    await state.set_state(TopUpStates.waiting_for_custom_amount)
    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@router.message(TopUpStates.waiting_for_custom_amount)
async def process_custom_amount_input(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 5:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 5 $. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        payment_link = await create_payment_link(telegram_id=message.from_user.id, amount=amount)
        await message.answer(
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ {amount} :\n{payment_link}",
            reply_markup=end_upbalance
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 150")
    except Exception as e:
        logging.error(traceback.format_exc())
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()



# ‚Çø –ö—Ä–∏–ø—Ç–∞: –≤—ã–±–æ—Ä —Å—É–º–º—ã
@router.callback_query(F.data == "cryptobot")
async def balance_up_start(call: CallbackQuery):
    await call.message.answer(
        "üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_balance_menu()
    )


# ‚Çø –ö—Ä–∏–ø—Ç–∞: –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã
@router.callback_query(F.data.startswith("balance_amount_"))
async def choose_crypto(call: CallbackQuery):
    amount = int(call.data.split("_")[-1])
    await call.message.answer(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_crypto_currency_keyboard(amount)
    )


# ‚Çø –ö—Ä–∏–ø—Ç–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(F.data.startswith("crypto_"))
async def create_payment(call: CallbackQuery):
    try:
        _, asset, amount_str = call.data.split("_")
        amount = int(amount_str)
    except (ValueError, IndexError):
        await call.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    telegram_id = call.from_user.id

    try:
        payment_url = await create_crypto_payment(telegram_id, amount, asset)
        await call.message.answer(
            f"üßæ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount} ‚ÇΩ —á–µ—Ä–µ–∑ {asset} —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}",
            reply_markup=end_upbalance
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {telegram_id}: {e}")
        logging.error(traceback.format_exc())
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ‚≠ê Telegram Stars: –º–µ–Ω—é
@router.callback_query(F.data == "tgstars")
async def open_star_menu(callback: CallbackQuery):
    await callback.message.answer(
        "üí´ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–≤—ë–∑–¥—ã:",
        reply_markup=get_star_topup_menu()
    )
    await callback.answer()


# ‚≠ê Telegram Stars: –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
@router.callback_query(F.data.startswith("tgstars_"))
async def process_star_topup(callback: CallbackQuery, state: FSMContext):
    amount_rub = int(callback.data.split("_")[1])
    stars_needed = round(amount_rub / STAR_PRICE_RUB)

    await callback.message.answer(
        f"üéÅ –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ <b>{amount_rub}‚ÇΩ</b>, "
        f"–ø–æ–¥–∞—Ä–∏—Ç–µ <b>{stars_needed} –∑–≤—ë–∑–¥</b> —ç—Ç–æ–º—É –±–æ—Ç—É –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <b>‚Äú–ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤–µ–∑–¥—É‚Äù</b> ‚≠êÔ∏è",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tgstars")]
            ]
        )
    )
    await callback.answer()


# ‚≠ê Telegram Stars: –ø—Ä–∏—ë–º –ø–æ–¥–∞—Ä–∫–∞
@router.message(F.gifted_stars)
async def handle_gifted_stars(message: Message):
    if not message.gifted_stars:
        return

    stars = message.gifted_stars.gift.count
    user_id = message.from_user.id

    try:
        payment = await register_star_payment(user_id=user_id, stars=stars)
        amount = payment.get("amount", 0)

        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ {stars} ‚≠ê!\n"
            f"üí∏ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount}‚ÇΩ</b>.",
            parse_mode="HTML"
        )
    except Exception:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–≤—ë–∑–¥.")
