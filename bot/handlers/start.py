import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, CommandObject
from aiogram.enums import ParseMode

from bot.keyboards.main_menu import inline_main_menu
from bot.keyboards.start_menu import inline_instruction_buttons
from bot.keyboards.reply import main_menu_kb

from bot.services.user_service import register_user_via_api
from bot.services.telegram_service import is_user_subscribed
from bot.services.promo_service import get_promo_code_from_api

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

router = Router()

@router.message(CommandStart())  # –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
async def cmd_start(message: Message, command: CommandObject):
    referral_code = command.args if command.args else None
    logger.info(f"Start triggered by {message.from_user.id}, referral: {referral_code}")
    await process_start(message.from_user.id, message.from_user.username, message, referral_code)


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_button_pressed(message: Message):
    logger.info(f"'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' button pressed by {message.from_user.id}")
    await process_start(message.from_user.id, message.from_user.username, message)


@router.callback_query(F.data == "start_from_button")
async def callback_start(callback: CallbackQuery):
    logger.info(f"Callback start triggered by {callback.from_user.id}")
    await process_start(callback.from_user.id, callback.from_user.username, callback.message)
    await callback.answer()


async def process_start(
    user_id: int,
    username: str,
    respond_to: Message,
    referral_code: str | None = None
):
    logger.info(f"Processing start for user {user_id} (username: {username}), referral: {referral_code}")
    
    result = await register_user_via_api(user_id, referral_code)
    logger.info(f"User registration result: {result}")

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await respond_to.answer(
        text="–ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_menu_kb
    )

    if result:
        link_code, created = result

        if created:
            is_subscribed = await is_user_subscribed(respond_to.bot, user_id)
            logger.info(f"New user {user_id} is subscribed: {is_subscribed}")

            await respond_to.answer(
                text=(
                    f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Anonix, <b>{respond_to.from_user.full_name}</b>!\n\n"
                    "üîß –í–∞—à VPN –£–ñ–ï –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
                    "üéÅ –ø–æ–ª—É—á–∏ <b>+5 –¥–Ω–µ–π</b>\n\n"
                    "üì¢ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É</b>, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª üëá\n\n"
                    "üì≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π OS:\n\n"
                    "üçè iOS: <a href='https://apps.apple.com/ru/app/v2raytun/id6476628951'>Anonix</a>\n"
                    "ü§ñ Android: <a href='https://play.google.com/store/apps/details?id=app.hiddify.com&hl=ru&pli=1'>Anonix</a>\n"
                    "üñ•Ô∏è Windows: <a href='https://apps.microsoft.com/detail/9pdfnl3qv2s5?hl=ru-RU&gl=RU'>Anonix</a>\n"
                    "üçè MacOS: <a href='https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690'>Anonix</a>\n\n"
                    "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç–µ VPN –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n"
                    f"‚ñ™Ô∏è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/Anonixvpn_vpnBot?start={link_code}\n\n"
                ),
                parse_mode=ParseMode.HTML,
                reply_markup=inline_instruction_buttons
            )
            return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    logger.info(f"User {user_id} already registered")
    await respond_to.bot.send_photo(
        chat_id=respond_to.chat.id,
        photo="https://play-lh.googleusercontent.com/BFkf2bgtxsCvsTnR2yw8yuWD3mgpThoyiRoBhoazTqFFMNOmdxGAAqS7vMATyNwelQ",
        caption=(
            "üî• –ù–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫—É, VPN —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, "
            "YouTube –≤ 4K ‚Äî –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫!\n\n"
            "üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –¥–∞—Å—Ç –Ω–∏ –æ–¥–∏–Ω VPN —Å–µ—Ä–≤–∏—Å –≤ –º–∏—Ä–µ.\n\n"
            "‚úÖ –ù–∞—à –∫–∞–Ω–∞–ª: "
        ),
        reply_markup=inline_main_menu,
        parse_mode=ParseMode.HTML
    )



@router.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"Check subscription for user {user_id}")

    is_subscribed = await is_user_subscribed(callback.bot, user_id)

    if is_subscribed:
        promo_code = await get_promo_code_from_api(user_id)
        logger.info(f"User {user_id} subscribed. Promo code: {promo_code}")

        await callback.message.answer(
            text=(
                "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!\n\n"
                f"üéÅ –í–æ—Ç –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ +5 –¥–Ω–µ–π: `{promo_code}`\n\n"
                "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN —Ü–µ–ª—ã—Ö 8 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
            ),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=main_menu_kb
        )
    else:
        logger.info(f"User {user_id} has NOT subscribed yet.")
        await callback.message.answer(
            text=(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑:" 
                "\nüîó [–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª]()"
            ),
            parse_mode=ParseMode.MARKDOWN
        )

    await callback.answer()


    


@router.callback_query(F.data == "help")
async def help_handler(callback: CallbackQuery):
    await callback.message.answer("üì¶ –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ —É—Å–ª—É–≥–∏")
    await callback.answer()

@router.callback_query(F.data == "reviews")
async def reviews(callback: CallbackQuery):
    await callback.message.edit_text("‚úçÔ∏è –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–∑—ã–≤—ã")
    await callback.answer()

@router.callback_query(F.data == "about_us")
async def about_us(callback: CallbackQuery):
    await callback.message.answer(
        "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –Ω–∞—à VPN-—Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ VLESS, Outline —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º.\n\n"
        "1‚É£ –ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º SSL –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ TLS –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–µ—á–µ–∫ WebRTC. –° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "2Ô∏è‚É£ –ú—ã —Ä–∞–∑–¥–∞–µ–º VPN —á–µ—Ä–µ–∑ Telegram, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –° YouFast VPN‚Ñ¢ –≤—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, –≥–¥–µ –±—ã –≤—ã –Ω–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å! –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞, –Ω–µ –±–µ—Å–ø–æ–∫–æ—è—Å—å –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.\n\n"
        "3Ô∏è‚É£ –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –º–Ω–æ–≥–∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö VPN-—Å–µ—Ä–≤–∏—Å–æ–≤, –º—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏ –Ω–µ –ø—Ä–æ–¥–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –í—Å–µ –∂—É—Ä–Ω–∞–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è —Å –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∞ –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å. –ü–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ VPN-–∫–ª—é—á–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º —Å –ø–æ–ª–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Ç–æ–º, —á—Ç–æ –≤–∞—à–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞.\n\n"
        "4Ô∏è‚É£ –ù–∞—à–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Ç—Ä–∞—Ñ–∏–∫ (—Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–æ 10 –ì–±–∏—Ç), –∞ –Ω–∞—à VPN —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º YouTube –≤ 4K –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫! –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç.\n\n"
        "–í—ã–±–∏—Ä–∞—è Anonix, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü!"
    )
    await callback.answer()


@router.callback_query(F.data == "gift_friend")
async def gift_friend(callback: CallbackQuery):
    await callback.message.answer("üì¶ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É")
    await callback.answer()

@router.callback_query(F.data == "partners")
async def partners(callback: CallbackQuery):
    await callback.message.answer("üì¶ –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã")
    await callback.answer()

@router.callback_query(F.data == "other_services")
async def other_services(callback: CallbackQuery):
    await callback.message.answer("üì¶ –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏")
    await callback.answer()
    
    
@router.callback_query(F.data == "buy_proxy")
async def buy_proxy(callback: CallbackQuery):
    await callback.message.answer("üì¶ –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏")
    await callback.answer()
