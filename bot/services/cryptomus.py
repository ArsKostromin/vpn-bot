import asyncio
import base64
import hashlib
import json
import logging
import aiohttp
from aiogram.types import Message
import urllib.parse

CRYPTOMUS_API_KEY = "WwNQW5SvFmkwozP6JTetW1VCpo5ywjoZ0DbfEgM9GfkVaXj5VS1Ey4TwPzsaUEgvQcNi7ldIhtcNF6ZchEYtIKqUFRjw8R3qkJMN9G9VB3V6vtdd0XW0dxKotU9fvtcE"
CRYPTOMUS_MERCHANT_ID = "59fc86a1-d195-4df8-8d17-3d6b06d2fe48"

logging.basicConfig(level=logging.DEBUG)


def generate_qr_code_url(address: str, amount: str = None, currency: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è QR-–∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    """
    try:
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
        base_url = "https://api.qrserver.com/v1/create-qr-code/"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
        qr_data = address
        if amount and currency:
            # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—É–º–º—É
            if currency.upper() in ["BTC", "ETH", "TON", "LTC"]:
                qr_data = f"{address}?amount={amount}"
        
        # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è URL
        encoded_data = urllib.parse.quote(qr_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
        qr_url = f"{base_url}?size=200x200&data={encoded_data}"
        
        return qr_url
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
        return ""


async def make_request(url: str, invoice_data: dict):
    encoded_data = base64.b64encode(
        json.dumps(invoice_data).encode("utf-8")
    ).decode("utf-8")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA256 –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (Cryptomus —Ç—Ä–µ–±—É–µ—Ç SHA256)
    signature = hashlib.sha256(
        f"{encoded_data}{CRYPTOMUS_API_KEY}".encode("utf-8")
    ).hexdigest()

    headers = {
        "merchant": CRYPTOMUS_MERCHANT_ID,
        "sign": signature,
    }

    logging.debug(f"Sending request to Cryptomus: {url} | headers={headers} | data={invoice_data}")

    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.post(url=url, json=invoice_data) as response:
            text = await response.text()
            logging.debug(f"Cryptomus raw response: {text}")
            if not response.ok:
                raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status} {text}")
            return json.loads(text)


def extract_wallet_info(response_data: dict) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –∏ QR-–∫–æ–¥–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Cryptomus
    """
    try:
        result = response_data.get("result", {})
        payment_address = result.get("payment_address", "")
        payment_amount = result.get("payment_amount", "")
        payment_currency = result.get("payment_currency", "")
        qr_code = result.get("qr_code", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞–¥—Ä–µ—Å
        if not payment_address:
            logging.warning("–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Cryptomus")
            return {}
        
        # –ï—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if not qr_code and payment_address:
            qr_code = generate_qr_code_url(payment_address, payment_amount, payment_currency)
            logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω QR-–∫–æ–¥ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {payment_address[:10]}...")
        
        return {
            "address": payment_address,
            "amount": payment_amount,
            "currency": payment_currency,
            "qr_code": qr_code,
            "uuid": result.get("uuid", "")
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ: {e}")
        return {}


async def check_invoice_paid(uuid: str, message: Message, state=None):
    while True:
        try:
            invoice_data = await make_request(
                url="https://api.cryptomus.com/v1/payment/info",
                invoice_data={"uuid": uuid},
            )

            status = invoice_data["result"].get("payment_status")
            logging.info(f"Invoice status: {status} | uuid={uuid}")

            if status in ("paid", "paid_over"):
                await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ!")
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
                if state:
                    await state.clear()
                return
            else:
                logging.debug(f"üïì –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª: {status}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)

        await asyncio.sleep(10)